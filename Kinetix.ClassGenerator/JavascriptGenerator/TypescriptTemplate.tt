<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
/*
    Ce fichier a été généré automatiquement.
    Toute modification sera perdue.
*/

import {EntityToType, StoreNode} from "focus4/entity";
import {<#= string.Join(", ", GetDomainList()) #>} from "../../domains";
<# var imports = GetImportList();
   foreach (var import in imports) { 
#>

import {<#= import.import #>} from "<#= import.path #>";<# 
} if (imports.Any()) { #>

<# } #>

export type <#= Model.Name #> = EntityToType<typeof <#= Model.Name #>Entity>;
export type <#= Model.Name #>Node = StoreNode<typeof <#= Model.Name #>Entity>;

export const <#= Model.Name #>Entity = {
    name: "<#= Utils.ToFirstLower(Model.Name) #>",
    fields: {
<# if (Model.ParentClass != null) { #>
        ...<#= Model.ParentClass.Name #>Entity.fields,
<# } #>
<# foreach (var property in Model.PropertyList) { #>
        <#= Utils.ToFirstLower(property.Name) #>: {
            type: <# if (IsArray(property)) { #>"list" as "list"<# } else if (property.IsFromComposition) { #>"object" as "object"<# } else { #>"field" as "field"<# } #>,
        <# if (GetDomain(property) != null) {
      #>    name: "<#= Utils.ToFirstLower(property.Name) #>",
            fieldType: {} as <#= ToTSType(property) #>,
            domain: <#= GetDomain(property) #>,
            isRequired: <#= Utils.ToFirstLower((property.DataMember.IsRequired && (!property.IsPrimaryKey || property.DataType != "int?")).ToString()) #>,
            label: "<#= Utils.ToNamespace(Model.Namespace.Name) #>.<#= Utils.ToFirstLower(Model.Name) #>.<#= Utils.ToFirstLower(property.Name) #>"
        <# } else {
      #>    entity: <#= GetReferencedType(property) #>Entity
        <# } #>}<# if (property != Model.PropertyList.Last()) { #>,<# }
#>

<#
} #>
    }
};
<# if (Model.IsReference) { #> 
export const <#= Utils.ToFirstLower(Model.Name) #> = {type: {} as <#= Model.Name #>, valueKey: "<#= Utils.ToFirstLower(Model.PrimaryKey.First().Name) #>", labelKey: "<#= Utils.ToFirstLower(Model.DefaultProperty ?? "Libelle") #>"}; 
<# } #>