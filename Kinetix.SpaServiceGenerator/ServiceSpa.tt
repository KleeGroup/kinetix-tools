<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="Kinetix.SpaServiceGenerator.Model" #>
/*
    Ce fichier a été généré automatiquement.
    Toute modification sera perdue.
*/

import {fetch} from "<#= ServerPath #>";
<# if (GetImportList().Any()) { #>

<# }
foreach (var import in GetImportList()) { #>
import {<#= import.import #>} from "<#= import.path #>";
<# } #>
<# foreach (var service in Services) { #>

/**
 * <#= service.Documentation.Summary #>
<# foreach (var param in service.Documentation.Parameters) { #> * @param <#= param.Item1 #> <#= param.Item2 #>
<# } #>
 * @param options Fetch options.
 */
export function <#= Utils.ToFirstLower(service.Name) #>(<#
    foreach (var parameter in service.Parameters) { 
        #><#= parameter.Name #><#= parameter.IsOptional ? "?" : "" #>: <#= GetTSType(parameter.Type) #><#
        if (parameter.Name != service.Parameters.Last().Name) {
            #>, <#
        }
    }
    if (service.Parameters.Count() > 0) {
        #>, <#
    } #>options: RequestInit = {}): Promise<<#= GetTSType(service.ReturnType) #>> {
    return fetch("<#= service.Verb #>", `./<#= Regex.Replace(service.Route.Replace("{", "${"), ":([a-z]+)", string.Empty) #>`, {<#
        if (service.BodyParameter != null) {
            #>body: <#= service.BodyParameter.Name #><#
        }
        if (service.BodyParameter != null && service.QueryParameters.Any()) {
            #>, <#
        }
        if (service.QueryParameters.Any()) {
            #>query: {<#
            foreach (var qParam in service.QueryParameters) {
                #><#= qParam.Name #><#
                if (qParam.Name != service.QueryParameters.Last().Name) {
                    #>, <#
                }
            }
            #>}<#
        }
        #>}, options);
}
<# } #>